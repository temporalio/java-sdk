buildscript {
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.11'
    }
}

plugins {
    id 'com.github.sherter.google-java-format' version '0.8'
    id 'com.google.protobuf' version '0.8.11'
    id 'java-library'
    id 'net.ltgt.errorprone' version '1.1.1'
    id 'net.minecrell.licenser' version '0.4.1'
    id 'ru.vyarus.quality' version '4.1.0'
}

repositories {
    maven {
        url 'https://plugins.gradle.org/m2/'
    }
    mavenCentral()
}

apply plugin: 'com.github.sherter.google-java-format'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea' // IntelliJ plugin to see files generated from protos
apply plugin: 'maven'
apply plugin: 'maven-publish'

if (hasProperty('signing.keyId')) {
    apply plugin: 'signing'
    signing {
        sign configurations.archives
    }
}

googleJavaFormat {
    toolVersion '1.5'
    include '**/*.java'
    exclude '**/generated/*'
    exclude '**/.idea/**'
}

quality {
    exclude '**/generated/*'
}

group = 'io.temporal'
version = '1.0.0'

description = '''Temporal Workflow Java SDK'''

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    errorproneJavac('com.google.errorprone:javac:9+181-r4173-1')
    errorprone('com.google.errorprone:error_prone_core:2.3.3')

    compile group: 'com.cronutils', name: 'cron-utils', version: '9.0.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    compile group: 'com.google.guava', name: 'guava', version: '28.1-jre'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.8.0'
    compile group: 'com.google.api.grpc', name: 'proto-google-common-protos', version: '1.17.0'

    compile group: 'com.uber.m3', name: 'tally-core', version: '0.4.0'
    compile group: 'io.grpc', name: 'grpc-testing', version: '1.28.0'
    compile group: 'io.micrometer', name: 'micrometer-core', version: '1.1.2'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'

    implementation 'io.grpc:grpc-netty-shaded:1.28.0'
    implementation 'io.grpc:grpc-protobuf:1.28.0'
    implementation 'io.grpc:grpc-stub:1.28.0'

    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    testCompile group: 'com.googlecode.junit-toolbox', name: 'junit-toolbox', version: '2.4'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

license {
    header rootProject.file('license-header.txt')
    exclude 'io/temporal/proto/**.java' // generated code
}

task initSubmodules(type: Exec) {
    description = 'Initializes submodules'
    commandLine 'git', 'submodule', 'init'
}

task updateSubmodules(type: Exec) {
    dependsOn initSubmodules
    description = 'Update submodules'
    commandLine 'git', 'submodule', 'update'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.11.0'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.28.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {
                outputSubDir = 'java'
            }
        }
    }
}

clean {
    delete protobuf.generatedFilesBaseDir
}

protobuf {
    generatedFilesBaseDir = "$buildDir/generated"
}
idea {
    module {
        sourceDirs += file("$buildDir/generated/main/java");
        sourceDirs += file("$buildDir/generated/main/grpc");
    }
}

compileJava {
    dependsOn 'googleJavaFormat'
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:none' << '-Xlint:deprecation' << '-Werror'
    options.errorprone.excludedPaths = '.*/generated-sources/.*'
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:none' << '-Xlint:deprecation' << '-Werror'
    options.errorprone.excludedPaths = '.*/generated-sources/.*'
}

// Generation version.properties for value to be included into the request header
task createProperties(dependsOn: processResources) {
    doLast {
        def subdir = new File('$buildDir/resources/main/io/temporal/')
        if (!subdir.exists()) {
            subdir.mkdirs()
        }
        new File('$buildDir/resources/main/io/temporal/version.properties').withWriter { w ->
            Properties p = new Properties()
            p['temporal-client-version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

javadoc {
    options.encoding = 'UTF-8'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

def ossrhUsername = hasProperty('ossrhUsername') ? property('ossrhUsername') : ''
def ossrhPassword = hasProperty('ossrhPassword') ? property('ossrhPassword') : ''

publishing {

    publications {
        maven(MavenPublication) {
            pom.withXml {
                asNode().with {
                    appendNode('packaging', 'jar')
                    appendNode('name', 'temporal-sdk')
                    appendNode('description', description)
                    appendNode('url', 'https://github.com/temporalio/temporal-java-sdk')
                    appendNode('scm').with {
                        appendNode('url', 'https://github.com/temporalio/temporal-java-sdk')
                        appendNode('connection', 'git@github.com:temporalio/temporal-java-sdk.git')
                    }
                    appendNode('licenses').with {
                        appendNode('license').with {
                            appendNode('name', 'The Apache License, Version 2.0')
                            appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                        }
                    }
                    appendNode('developers').with {
                        appendNode('maxim').with {
                            appendNode('id', 'mfateev')
                            appendNode('name', 'Maxim Fateev')
                            appendNode('email', 'maxim@temporal.io')
                        }
                        appendNode('developer').with {
                            appendNode('id', 'samarabbas')
                            appendNode('name', 'Samar Abbas')
                            appendNode('email', 'samar@temporal.io')
                        }
                    }
                }
            }
        }

        mavenJava(MavenPublication) {
            from components.java
            artifact javadocJar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
            if (project.version.endsWith('-SNAPSHOT')) {
                url 'https://oss.sonatype.org/content/repositories/snapshots/'
            } else {
                url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            }
        }
    }
}

task registerDomain(type: JavaExec) {
    main = 'io.temporal.RegisterTestDomain'
    classpath = sourceSets.test.runtimeClasspath
}

test {
    dependsOn 'registerDomain'
    dependsOn 'checkLicenseMain'
    testLogging {
        events 'passed', 'skipped', 'failed'
        exceptionFormat 'full'
        // Uncomment the following line if you want to see test logs in gradlew run.
        showStandardStreams true
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'temporal-sdk'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Temporal Java SDK'
                url 'https://github.com/temporalio/temporal-java-sdk'

                scm {
                    connection 'scm:git@github.com:temporalio/temporal-java-sdk.git'
                    developerConnection 'scm:git@github.com:temporalio/temporal-java-sdk.git'
                    url 'https://github.com/temporalio/temporal-java-sdk.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'mfateev'
                        name 'Maxim Fateev'
                        email 'maxim@temporal.io'
                    }
                    developer {
                        id 'samarabbas'
                        name 'Samar Abbas'
                        email 'samar@temporal.io'
                    }
                }
            }
        }
    }
}

//logging.captureStandardOutput LogLevel.INFO
