// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: temporal/api/common/v1/message.proto

package io.temporal.api.common.v1;

public interface RetryPolicyOrBuilder extends
    // @@protoc_insertion_point(interface_extends:temporal.api.common.v1.RetryPolicy)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Interval of the first retry. If retryBackoffCoefficient is 1.0 then it is used for all retries.
   * </pre>
   *
   * <code>.google.protobuf.Duration initial_interval = 1 [(.gogoproto.stdduration) = true];</code>
   * @return Whether the initialInterval field is set.
   */
  boolean hasInitialInterval();
  /**
   * <pre>
   * Interval of the first retry. If retryBackoffCoefficient is 1.0 then it is used for all retries.
   * </pre>
   *
   * <code>.google.protobuf.Duration initial_interval = 1 [(.gogoproto.stdduration) = true];</code>
   * @return The initialInterval.
   */
  com.google.protobuf.Duration getInitialInterval();
  /**
   * <pre>
   * Interval of the first retry. If retryBackoffCoefficient is 1.0 then it is used for all retries.
   * </pre>
   *
   * <code>.google.protobuf.Duration initial_interval = 1 [(.gogoproto.stdduration) = true];</code>
   */
  com.google.protobuf.DurationOrBuilder getInitialIntervalOrBuilder();

  /**
   * <pre>
   * Coefficient used to calculate the next retry interval.
   * The next retry interval is previous interval multiplied by the coefficient.
   * Must be 1 or larger.
   * </pre>
   *
   * <code>double backoff_coefficient = 2;</code>
   * @return The backoffCoefficient.
   */
  double getBackoffCoefficient();

  /**
   * <pre>
   * Maximum interval between retries. Exponential backoff leads to interval increase.
   * This value is the cap of the increase. Default is 100x of the initial interval.
   * </pre>
   *
   * <code>.google.protobuf.Duration maximum_interval = 3 [(.gogoproto.stdduration) = true];</code>
   * @return Whether the maximumInterval field is set.
   */
  boolean hasMaximumInterval();
  /**
   * <pre>
   * Maximum interval between retries. Exponential backoff leads to interval increase.
   * This value is the cap of the increase. Default is 100x of the initial interval.
   * </pre>
   *
   * <code>.google.protobuf.Duration maximum_interval = 3 [(.gogoproto.stdduration) = true];</code>
   * @return The maximumInterval.
   */
  com.google.protobuf.Duration getMaximumInterval();
  /**
   * <pre>
   * Maximum interval between retries. Exponential backoff leads to interval increase.
   * This value is the cap of the increase. Default is 100x of the initial interval.
   * </pre>
   *
   * <code>.google.protobuf.Duration maximum_interval = 3 [(.gogoproto.stdduration) = true];</code>
   */
  com.google.protobuf.DurationOrBuilder getMaximumIntervalOrBuilder();

  /**
   * <pre>
   * Maximum number of attempts. When exceeded the retries stop even if not expired yet.
   * 1 disables retries. 0 means unlimited (up to the timeouts)
   * </pre>
   *
   * <code>int32 maximum_attempts = 4;</code>
   * @return The maximumAttempts.
   */
  int getMaximumAttempts();

  /**
   * <pre>
   * Non-Retryable errors types. Will stop retrying if error type matches this list.
   * </pre>
   *
   * <code>repeated string non_retryable_error_types = 5;</code>
   * @return A list containing the nonRetryableErrorTypes.
   */
  java.util.List<java.lang.String>
      getNonRetryableErrorTypesList();
  /**
   * <pre>
   * Non-Retryable errors types. Will stop retrying if error type matches this list.
   * </pre>
   *
   * <code>repeated string non_retryable_error_types = 5;</code>
   * @return The count of nonRetryableErrorTypes.
   */
  int getNonRetryableErrorTypesCount();
  /**
   * <pre>
   * Non-Retryable errors types. Will stop retrying if error type matches this list.
   * </pre>
   *
   * <code>repeated string non_retryable_error_types = 5;</code>
   * @param index The index of the element to return.
   * @return The nonRetryableErrorTypes at the given index.
   */
  java.lang.String getNonRetryableErrorTypes(int index);
  /**
   * <pre>
   * Non-Retryable errors types. Will stop retrying if error type matches this list.
   * </pre>
   *
   * <code>repeated string non_retryable_error_types = 5;</code>
   * @param index The index of the value to return.
   * @return The bytes of the nonRetryableErrorTypes at the given index.
   */
  com.google.protobuf.ByteString
      getNonRetryableErrorTypesBytes(int index);
}
